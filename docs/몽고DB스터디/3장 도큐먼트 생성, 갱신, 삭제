3장 도큐먼트 생성, 갱신, 삭제

3.1 도큐먼트 삽입
 > 단일 도큐먼트 삽입시 : insertOne - insertOne({"title":"Stand by Me"})
 > 여러 도큐먼트 삽입시 : insertMany
   - 대괄호[]로 배열처럼 입력
   - 삽입속도 빠름(단 48MB보다 큰 사이즈 허용불가)
   - 첫 번째 파라미터는 값을 두 번째 옵션 도큐먼트 지정 가능(예 {"ordered" : true} 
   - 이보다 큰 Bulk Write API는 https://docs.mongodb.org/manual/core/flash-write-properties) 참고
 > 유효성 검사
   - 기본구조 검사("_id"가 없으면 새로 추가)
   - 도큐먼트는 16MB보다 작은지 크기 검사(크기 확인 : db.컬렉션명.bsonsize({"name":"joe"})
 > insert는 3.0이전 버전임 되도록이면 insertOne, insertMany 사용하자

3.2 도큐먼트 삭제
 > deleteOne -(예시 db.movies.deleteOne({"name":"joe"})
   - 여러 도큐먼트가 조회되도 첫번째 도큐먼트만 삭제
 > deleteMany
   - 필터와 일치하는 모든 도큐먼트 삭제
 > remove는 3.0 이전임
 > drop (예 : db.movies.drop())
   - 전체 컬렉션 삭제시 drop가 빠름
   - 데이터가 제거되면 복구 불가하기 때문에 백업이 반듯이 수반되어야 함.

3.3 도큐먼트 갱신
 > updateOne, updateMany, replaceOne
   - 첫 번째 파라미터는 필터 도큐먼트, 두 번째는 변경 사항 설명하는 도큐먼트(updateOne, updateMany)
   - 첫 번째 파라미터는 필터 도큐먼트, 두 번째는 필터와 일치하는 교체할 도큐먼트(replaceOne)
 > 갱신은 원자적임(즉 여러분 동시에 갱신해도 최종 마지막 수정된 값으로 변경됨)
 > replaceOne 치환 
   - var joe 막 변경 후 다음 명령어 치면 치환됨 db.users.replaceOne({"name" : "joe"}, joe);
   - 두번째 파라미터는 필터 도큐먼트와 일치하는 값이야 한다.  고유한 "_id" 동일해야 함
 > 숫자값 갱신하려면 $inc 제한자를 사용해야 함
   - db.movies.updateOne({views : 1}, {"$inc" : {views : 1}}) - views가 1 증가
   - 새로운 필드를 추가할 수도 있음
   - 단 int, long, double, decimal 타입만 가능
 > 새로운 필드를 추가하거나 변경하려면 $set 제한지 사용해야 함
   - 심지어 데이터 유형도 변경 가능 예로 일반 값을 배열로 변경 가능
 > 필드를 지우려면 $unset 사용해야 함
   - db.movies.updateOne({"name","joe"},{"$unset" : {"favorite book" : 1}}) 
 > 배열 연산
   - $push : 배열이 존재하면 배열 끝에 요소 추가, 없으면 새로 배열 생성함.
      - db.movies.updateOne({"name","joe"},{"$push" : {"favorite book" : {"book name" : "AAA"}}})
      - $each 제한자로 여러 개 추가 가능
      - $slice 배열 특정 길이 제한
      - $sort 요소 정렬
      - $slice, $sort를 배열상에서 $push와 같이 쓰려면 $each도 사용해야함.
   - $ne : 특정 배열에 존재하지 않을 때만 추가
      - db.papers.updateOne({"authors cited":{"$ne":"Richie"}}, {$push:{"authors cited" : "Richie"}})
   - $addToSet : 특정 배열에 존재하지 않을 때만 추가($push없이 추가 가능)
      - db.papers.updateOne({"authors cited":"Richie"}, {$addToSet:{"emails" : "joe@gmail.com"}})
      - $each를 조합하여 고유 값을 여러 개 추가 가능
   -  $pop : 배열 양쪽 끝에서 요소 제거
      - {"$pop" : {"key" : 1}} : 배열 마지막 요소부터 제거
      - {"$pop" : {"key" : -1}} : 배열 처음 요소부터 제거
   - $pull : 주어진 조건에 맞는 배열 요소 제거
      - db.lists.updateOne({}, {"$pull" : {"todo" : "laundry"}})
      - 조건과 일치하는 모든 도큐먼트를 지운다.
   - 위치기반처리
      - 인덱스번호 타입 : db.blog.updateOne({"post" : post_id}, {"$inc" : {"comments.0.votes" : 1}})
      - $위치 연산자 타입 : db.blog.updateOne({"comments.author" : "John"}, {"$set" : {"comments.$.author" : "Jim"}})
   - 배열필터갱신
      - arrayFilters
        - db.blog.updateOne( {"post" : post_id }, { $set: { "comments.$[elem].hidden" : true } }, { arrayFilters: [ { "elem.votes": { $lte: -5 } } ] } )
          - comments 배열의 각 일치 요소를 elem로 정의하고 elem의 투표값이 -5이하면 hidden필드에 true셋팅
 > 갱신 입력
   - 도큐먼트가 미존재 시 등록, 존재시 갱신
   - db.analytics.updateOne({"url" : "/blog"}, {"$inc" : {"pageviews" : 1}}, {"upsert" : true})
   - $setOnInsert는 신규 추가될 때만 인서트 그 뒤로는 갱신 안 되게 함.
     - db.users.updateOne ( { } , { " $ setOnInsert " : { " createdAt " : new Date ( ) } } , { " upsert " : true }
 > 저장셀보조자(save)
   - save : 도큐먼트가 존재하면 갱신, 없으면 삽입하며 매개변수로 도큐먼트를 넘겨 받음
     - db.test.save()
 > 다중 도큐먼트 갱신
   - db.users.updateMany({"birthday" : "10/13/1978"}, {"$set" : {"gift" : "Happy Birthday!"}})
 > 갱신한 도큐먼트 반환
   - FindOneAndDelete, FindOneAndReplace, FindOneAndUpdate 세 개의 컬렉션 메서드
   - db.processes.findOneAndUpdate({"status" : "READY"}, {"$set" : {"status" : "RUNNING"}}, {"sort" : {"priority" : -1}, "returnNewDocument": true})
     - 옵션 도큐먼트의 "returnNewDocumentment" 필 드를 true로 설정하면 갱신된 도큐먼트를 반환
